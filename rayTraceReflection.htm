<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Ray trace reflection</title>
    <script type="text/javascript" src="Vector3.js"></script>
    <script type="text/javascript" src="Ray3.js"></script>
    <script type="text/javascript" src="IntersectResult.js"></script>
    <script type="text/javascript" src="Sphere.js"></script>
    <script type="text/javascript" src="Plane.js"></script>
    <script type="text/javascript" src="Union.js"></script>
    <script type="text/javascript" src="PerspectiveCamera.js"></script>
    <script type="text/javascript" src="Color.js"></script>
    <script type="text/javascript" src="CheckerMaterial.js"></script>
    <script type="text/javascript" src="PhongMaterial.js"></script>
    <script type="text/javascript">
function rayTraceRecursive(scene, ray, maxReflect) {
    var result = scene.intersect(ray);
    
    if (result.geometry) {
        var reflectiveness = result.geometry.material.reflectiveness;
        var color = result.geometry.material.sample(ray, result.position, result.normal);
        color = color.multiply(1 - reflectiveness);
        
        if (reflectiveness > 0 && maxReflect > 0) {
            var r = result.normal.multiply(-2 * result.normal.dot(ray.direction)).add(ray.direction);
            ray = new Ray3(result.position, r);
            var reflectedColor = rayTraceRecursive(scene, ray, maxReflect - 1);
            color = color.add(reflectedColor.multiply(reflectiveness));
        }
        return color;
    }
    else
        return Color.black;
}

function rayTraceReflection(canvas, scene, camera, maxReflect) {
    if (!canvas || !canvas.getContext) 
        return;

    var ctx = canvas.getContext("2d");
    if (!ctx.getImageData)
        return;

    var w = canvas.attributes.width.value;
    var h = canvas.attributes.height.value;
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fillRect(0, 0, w, h);

    var imgdata = ctx.getImageData(0, 0, w, h);
    var pixels = imgdata.data;

    scene.initialize();
    camera.initialize();

    var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
            var ray = camera.generateRay(sx, sy);
            var color = rayTraceRecursive(scene, ray, maxReflect);
            pixels[i++] = color.r * 255;
            pixels[i++] = color.g * 255;
            pixels[i++] = color.b * 255;
            pixels[i++] = 255;
        }
    }

    ctx.putImageData(imgdata, 0, 0);
}
    </script>
</head>
<body onload="">
<canvas id="renderCanvas" width="256" height="256"></canvas>
<br />
<textarea id="code" rows="12" cols="100">
var plane = new Plane(new Vector3(0, 1, 0), 0);
var sphere1 = new Sphere(new Vector3(-10, 10, -10), 10);
var sphere2 = new Sphere(new Vector3(10, 10, -10), 10);
plane.material = new CheckerMaterial(0.1, 0.5);
sphere1.material = new PhongMaterial(Color.red, Color.white, 16, 0.25);
sphere2.material = new PhongMaterial(Color.blue, Color.white, 16, 0.25);

rayTraceReflection(
    document.getElementById('renderCanvas'), 
    new Union([plane, sphere1, sphere2]),
    new PerspectiveCamera(new Vector3(0, 5, 15), new Vector3(0, 0, -1), new Vector3(0, 1, 0), 90),
    3);</textarea>
<br/>
<button onclick="eval(document.getElementById('code').value)">Run</button>
</body>
</html>
